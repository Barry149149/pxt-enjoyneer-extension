<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Msy.?$T@f~|}j@)15s(-" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="o5pErVQSu4,DgChoS_8u" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HaHeHiHoHu {" line1="" line2="    const PCA9685_ADDRESS = 0x40" line3="    const MODE1 = 0x00" line4="    const MODE2 = 0x01" line5="    const SUBADR1 = 0x02" line6="    const SUBADR2 = 0x03" line7="    const SUBADR3 = 0x04" line8="    const PRESCALE = 0xFE" line9="    const LED0_ON_L = 0x06" line10="    const LED0_ON_H = 0x07" line11="    const LED0_OFF_L = 0x08" line12="    const LED0_OFF_H = 0x09" line13="    const ALL_LED_ON_L = 0xFA" line14="    const ALL_LED_ON_H = 0xFB" line15="    const ALL_LED_OFF_L = 0xFC" line16="    const ALL_LED_OFF_H = 0xFD" line17="" line18="    let initialized = false" line19="" line20="    const PortDigi = [" line21="        [DigitalPin.P8, DigitalPin.P0]," line22="        [DigitalPin.P12, DigitalPin.P1]," line23="        [DigitalPin.P13, DigitalPin.P2]," line24="        [DigitalPin.P15, DigitalPin.P14]," line25="        [DigitalPin.P6, DigitalPin.P3]," line26="        [DigitalPin.P7, DigitalPin.P4]," line27="        [DigitalPin.P9, DigitalPin.P10]" line28="    ]" line29="" line30="    export enum Ports {" line31="        PORT1 = 0," line32="        PORT2 = 1," line33="        PORT3 = 2," line34="        PORT4 = 3," line35="        PORT5 = 4," line36="        PORT6 = 5," line37="        PORT7 = 6" line38="    }" line39="" line40="    export enum Slots {" line41="        A = 1, // inverse slot by zp" line42="        B = 0" line43="    }" line44="" line45="    export enum Motors {" line46="        M1 = 0x1," line47="        M2 = 0x2" line48="    }" line49="" line50="    export enum DHT11Type {" line51="        //% block=temperature(°C)" line52="        TemperatureC = 0," line53="        //% block=temperature(°F)" line54="        TemperatureF = 1," line55="        //% block=humidity" line56="        Humidity = 2" line57="    }" line58="" line59="    function i2cwrite(addr: number, reg: number, value: number) {" line60="        let buf = pins.createBuffer(2)" line61="        buf[0] = reg" line62="        buf[1] = value" line63="        pins.i2cWriteBuffer(addr, buf)" line64="    }" line65="" line66="    function i2ccmd(addr: number, value: number) {" line67="        let buf2 = pins.createBuffer(1)" line68="        buf2[0] = value" line69="        pins.i2cWriteBuffer(addr, buf2)" line70="    }" line71="" line72="" line73="    function i2cread(addr: number, reg: number) {" line74="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line75="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line76="        return val;" line77="    }" line78="" line79="    function setFreq(freq: number): void {" line80="        // Constrain the frequency" line81="        let prescaleval = 25000000;" line82="        prescaleval /= 4096;" line83="        prescaleval /= freq;" line84="        prescaleval -= 1;" line85="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line86="        let oldmode = i2cread(PCA9685_ADDRESS, MODE1);" line87="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line88="        i2cwrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line89="        i2cwrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line90="        i2cwrite(PCA9685_ADDRESS, MODE1, oldmode);" line91="        control.waitMicros(5000);" line92="        i2cwrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line93="    }" line94="" line95="    function setPwm(channel: number, on: number, off: number): void {" line96="        if (channel &lt; 0 || channel &gt; 15)" line97="            return;" line98="        let buf3 = pins.createBuffer(5);" line99="        buf3[0] = LED0_ON_L + 4 * channel;" line100="        buf3[1] = on &amp; 0xff;" line101="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line102="        buf3[3] = off &amp; 0xff;" line103="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line104="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line105="    }" line106="" line107="    function initPCA9685(): void {" line108="        i2cwrite(PCA9685_ADDRESS, MODE1, 0x00)" line109="        setFreq(50);" line110="        for (let idx = 0; idx &lt; 16; idx++) {" line111="            setPwm(idx, 0, 0);" line112="        }" line113="        initialized = true" line114="    }" line115="" line116="    export function MotorRun(index: Motors, speed: number): void {" line117="        if (!initialized) {" line118="            initPCA9685()" line119="        }" line120="        speed = speed * 16; // map 255 to 4096" line121="        if (speed &gt;= 4096) {" line122="            speed = 4095" line123="        }" line124="        if (speed &lt;= -4096) {" line125="            speed = -4095" line126="        }" line127="        if (index &gt; 2 || index &lt;= 0)" line128="            return" line129="        let pp = (index - 1) * 2" line130="        let pn = (index - 1) * 2 + 1" line131="        // serial.writeString(&quot;M &quot; + index + &quot; spd &quot; + speed + &quot; pp &quot; + pp + &quot; pn &quot; + pn + &quot;\n&quot;)" line132="        if (speed &gt;= 0) {" line133="            setPwm(pp, 0, speed)" line134="            setPwm(pn, 0, 0)" line135="        } else {" line136="            setPwm(pp, 0, 0)" line137="            setPwm(pn, 0, -speed)" line138="        }" line139="    }" line140="" line141="    //% blockId=dht11 block=&quot;DHT11|port %port|type %readtype&quot;" line142="    //% weight=60" line143="    //% group=&quot;Environment&quot; blockGap=50" line144="    export function DHT11(port: Ports, readtype: DHT11Type): number {" line145="        let dht11pin = PortDigi[port][0]" line146="" line147="        pins.digitalWritePin(dht11pin, 0)" line148="        basic.pause(18)" line149="        let i = pins.digitalReadPin(dht11pin)" line150="        pins.setPull(dht11pin, PinPullMode.PullUp);" line151="        switch (readtype) {" line152="            case 0:" line153="                let dhtvalue1 = 0;" line154="                let dhtcounter1 = 0;" line155="                while (pins.digitalReadPin(dht11pin) == 1);" line156="                while (pins.digitalReadPin(dht11pin) == 0);" line157="                while (pins.digitalReadPin(dht11pin) == 1);" line158="                for (let j = 0; j &lt;= 32 - 1; j++) {" line159="                    while (pins.digitalReadPin(dht11pin) == 0);" line160="                    dhtcounter1 = 0" line161="                    while (pins.digitalReadPin(dht11pin) == 1) {" line162="                        dhtcounter1 += 1;" line163="                    }" line164="                    if (j &gt; 15) {" line165="                        if (dhtcounter1 &gt; 2) {" line166="                            dhtvalue1 = dhtvalue1 + (1 &lt;&lt; (31 - j));" line167="                        }" line168="                    }" line169="                }" line170="                return ((dhtvalue1 &amp; 0x0000ff00) &gt;&gt; 8);" line171="                break;" line172="            case 1:" line173="                while (pins.digitalReadPin(dht11pin) == 1);" line174="                while (pins.digitalReadPin(dht11pin) == 0);" line175="                while (pins.digitalReadPin(dht11pin) == 1);" line176="                let dhtvalue = 0;" line177="                let dhtcounter = 0;" line178="                for (let k = 0; k &lt;= 32 - 1; k++) {" line179="                    while (pins.digitalReadPin(dht11pin) == 0);" line180="                    dhtcounter = 0" line181="                    while (pins.digitalReadPin(dht11pin) == 1) {" line182="                        dhtcounter += 1;" line183="                    }" line184="                    if (k &gt; 15) {" line185="                        if (dhtcounter &gt; 2) {" line186="                            dhtvalue = dhtvalue + (1 &lt;&lt; (31 - k));" line187="                        }" line188="                    }" line189="                }" line190="                return Math.round((((dhtvalue &amp; 0x0000ff00) &gt;&gt; 8) * 9 / 5) + 32);" line191="                break;" line192="            case 2:" line193="                while (pins.digitalReadPin(dht11pin) == 1);" line194="                while (pins.digitalReadPin(dht11pin) == 0);" line195="                while (pins.digitalReadPin(dht11pin) == 1);" line196="" line197="                let value = 0;" line198="                let counter = 0;" line199="" line200="                for (let l = 0; l &lt;= 8 - 1; l++) {" line201="                    while (pins.digitalReadPin(dht11pin) == 0);" line202="                    counter = 0" line203="                    while (pins.digitalReadPin(dht11pin) == 1) {" line204="                        counter += 1;" line205="                    }" line206="                    if (counter &gt; 3) {" line207="                        value = value + (1 &lt;&lt; (7 - l));" line208="                    }" line209="                }" line210="                return value;" line211="            default:" line212="                return 0;" line213="        }" line214="    }" line215="" line216="    //% blockId=haha block=&quot;HaHa|huhu %hehe|huhu %hihi&quot;" line217="    //% group=&quot;gaga&quot; weight=81" line218="    export function HaHa(hehe: number, hihi: string): void{" line219="" line220="    }" line221="" line222="    //% blockId=hehe block=&quot;HeHe|hoho %hehe|hoho %hihi&quot;" line223="    //% group=&quot;gaga&quot; weight=81" line224="    export function HeHe(hehe: number, hihi: string): void {" line225="" line226="    }" line227="" line228="    //% blockId=hihi block=&quot;HiHi|hoho %hehe|hoho %hihi&quot;" line229="    //% group=&quot;gaga&quot; weight=81" line230="    export function HiHi(hehe: number, hihi: string): void {" line231="" line232="    }" line233="" line234="    //% blockId=hoho block=&quot;HoHo|hoho %hehe|hoho %hihi&quot;" line235="    //% group=&quot;gaga&quot; weight=81" line236="    export function HoHo(hehe: number, hihi: string): void {" line237="" line238="    }" line239="" line240="    //% blockId=huhu block=&quot;HuHu|hoho %hehe|hoho %hihi&quot;" line241="    //% group=&quot;gaga&quot; weight=81" line242="    export function HuHu(hehe: number, hihi: string): void {" line243="" line244="    }" line245="" line246="" line247="    //% blockId=custom_motor_dual block=&quot;Motor|speed of Motor1 %speed1|speed of Motor2 %speed2&quot;" line248="    //% weight=43" line249="    //% speed1.min=-255 speed1.max=255" line250="    //% speed2.min=-255 speed2.max=255" line251="    //% group=&quot;Actuator&quot; name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line252="    export function MotorRunDual(speed1: number, speed2: number): void {" line253="        MotorRun(1, speed1);" line254="        MotorRun(2, speed2);" line255="    }" line256="" line257="    //% blockId=custom_tracer block=&quot;Tracer|port %port|slot %slot&quot;" line258="    //% group=&quot;Linefollower&quot; weight=81" line259="    export function Tracer(port: Ports, slot: Slots): boolean {" line260="        let pin = PortDigi[port][slot]" line261="        pins.setPull(pin, PinPullMode.PullUp)" line262="        return pins.digitalReadPin(pin) == 1" line263="    }" line264="" line265="    //% blockId=custom_tracing_line_with_motors block=&quot;MoveAlongBlackLine|port %port|speed %speed&quot;" line266="    //% speed.min=-255 speed.max=255" line267="    export function TracingLineWithMotors(port: Ports, speed: number): void {" line268="        if (Tracer(port, Slots.A) &amp;&amp; Tracer(port, Slots.B)) {" line269="            MotorRunDual(speed, speed)" line270="        } else if (!(Tracer(port, Slots.A)) &amp;&amp; Tracer(port, Slots.B)) {" line271="            MotorRunDual(speed, -speed)" line272="        } else if (Tracer(port, Slots.A) &amp;&amp; !(Tracer(port, Slots.B))) {" line273="            MotorRunDual(-speed, speed)" line274="        } else if (!(Tracer(port, Slots.A)) &amp;&amp; !(Tracer(port, Slots.B))) {" line275="            MotorRunDual(-speed, -speed)" line276="        }" line277="    }" line278="}" numlines="279"></mutation></block></statement></block></xml>